import random
import json


# ---------- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å—Ç—Ä–æ–∫ ----------
def split_string(s, n=3):
    shares = [[] for _ in range(n)]
    for ch in s.encode("utf-8"):
        parts = [random.randint(0, 255) for _ in range(n - 1)]
        last = (ch - sum(parts)) % 256
        for i in range(n - 1):
            shares[i].append(parts[i])
        shares[-1].append(last)
    return shares


def reconstruct_string(shares):
    bytes_reconstructed = []
    for i in range(len(shares[0])):
        val = sum(share[i] for share in shares) % 256
        bytes_reconstructed.append(val)
    return bytes(bytes_reconstructed).decode("utf-8", errors="ignore")


# ---------- –ö–ª–∞—Å—Å—ã ----------
class Node:
    def __init__(self, name):
        self.name = name
        self.received = []  # —Å–ø–∏—Å–æ–∫ (–∏—Å—Ç–æ—á–Ω–∏–∫, –ø–æ–ª–µ, id, –¥–æ–ª—è)

    def receive_share(self, source, record_id, field, share):
        self.received.append((source, record_id, field, share))


class Source:
    def __init__(self, name, data):
        self.name = name
        self.data = data  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        self.data_map = []

    def process_and_send(self, nodes):
        print(f"\nüì° {self.name} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ:")
        for record in self.data:
            local_id = record["id"]
            entry_map = {"local_id": local_id, "fields": {}}

            for field, value in record.items():
                if field == "id":
                    continue
                shares = split_string(str(value), n=len(nodes))
                entry_map["fields"][field] = {nodes[i].name: shares[i] for i in range(len(nodes))}

                for i, node in enumerate(nodes):
                    node.receive_share(self.name, local_id, field, shares[i])
                    print(f"  - {field} ({value}) ‚Üí {node.name}: {shares[i]}")

            self.data_map.append(entry_map)

    def export_data_map(self, filename):
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(self.data_map, f, indent=4, ensure_ascii=False)


# ---------- –ö–∞—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö ----------
class DataMap:
    def __init__(self):
        self.entries = []  # —Å–≤—è–∑—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ ID —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

    def add_entry(self, global_id, ids):
        # ids = {"–ò—Å—Ç–æ—á–Ω–∏–∫1": "id1", "–ò—Å—Ç–æ—á–Ω–∏–∫2": "id2", ...}
        self.entries.append({"global_id": global_id, "local_ids": ids})

    def export(self, filename):
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(self.entries, f, indent=4, ensure_ascii=False)


# ---------- –°–∏–º—É–ª—è—Ü–∏—è ----------
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    src1 = Source(
        "–ò—Å—Ç–æ—á–Ω–∏–∫1",
        [
            {
                "id": "L1-001",
                "–§–ò–û": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
                "–î–∞—Ç–∞–†–æ–∂–¥–µ–Ω–∏—è": "1980-01-01",
                "–°–ù–ò–õ–°": "123-456-789 00",
                "X": "–î–∞–Ω–Ω—ã–µ X1",
            },
        ],
    )
    src2 = Source(
        "–ò—Å—Ç–æ—á–Ω–∏–∫2",
        [
            {
                "id": "L2-777",
                "–§–ò–û": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
                "–î–∞—Ç–∞–†–æ–∂–¥–µ–Ω–∏—è": "1980-01-01",
                "–ü–∞—Å–ø–æ—Ä—Ç": "4500 123456",
                "Y": "–î–∞–Ω–Ω—ã–µ Y1",
            },
        ],
    )
    src3 = Source(
        "–ò—Å—Ç–æ—á–Ω–∏–∫3",
        [
            {
                "id": "L3-999",
                "–§–ò–û": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
                "–î–∞—Ç–∞–†–æ–∂–¥–µ–Ω–∏—è": "1980-01-01",
                "–ü–∞—Å–ø–æ—Ä—Ç": "4500 123456",
                "–°–ù–ò–õ–°": "123-456-789 00",
                "Z": "–î–∞–Ω–Ω—ã–µ Z1",
            },
        ],
    )

    nodes = [Node("–£–∑–µ–ª1"), Node("–£–∑–µ–ª2"), Node("–£–∑–µ–ª3")]

    src1.process_and_send(nodes)
    src2.process_and_send(nodes)
    src3.process_and_send(nodes)

    # –ö–∞—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    card = DataMap()
    card.add_entry("GLOB-001", {"–ò—Å—Ç–æ—á–Ω–∏–∫1": "L1-001", "–ò—Å—Ç–æ—á–Ω–∏–∫2": "L2-777", "–ò—Å—Ç–æ—á–Ω–∏–∫3": "L3-999"})

    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
    src1.export_data_map("data_map_src1.json")
    src2.export_data_map("data_map_src2.json")
    src3.export_data_map("data_map_src3.json")
    card.export("card.json")

    # –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–ø—Ä–∏–º–µ—Ä)
    print("\nüîë –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –§–ò–û –∏–∑ —Ç—Ä—ë—Ö —É–∑–ª–æ–≤ (–∏—Å—Ç–æ—á–Ω–∏–∫1, –∑–∞–ø–∏—Å—å L1-001, –ø–æ–ª–µ –§–ò–û)
    fio_shares = [
        share
        for node in nodes
        for (s, rid, field, share) in node.received
        if s == "–ò—Å—Ç–æ—á–Ω–∏–∫1" and rid == "L1-001" and field == "–§–ò–û"
    ]
    fio = reconstruct_string(fio_shares)
    print(f"–§–ò–û –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {fio}")
